Ravenscar for Xilinx Ultrascale+ boards
=======================================

Main characteristics:
---------------------

This runtime supports the running on the quad cortex-A53 SMP APU block of the
UltraScale+ MPSoC. It is targeting the Avnet UltraZed board.

- boot from Exception Level 3-1: the boot process is configuring the various
  EL down to 1 in 64-bit mode. The runtime mode used is EL1 non-secure.
- MMU: the mmu configuration is expecting 2GB of DDRAM and configures the
  memory access in 32-bit mode.
- SMP: the four cores are supported by the runtime in SMP mode.
- Interrupts: 16 level of interrupt priority are supported, and thus nested
  interruptions are supported as well. Finally, the use of the FPU is always
  supported, in tasks and in interrupt handlers.


Getting Started with Xilinx Tools and GNAT
------------------------------------------

To run an Ada application using the Xilinx Tools, you'll need

* Xilinx Software Developent Kit (XSDK) 2017.4 or later
* Gnatbench plugin for Eclipse CDT
* The GNAT compiler for aarch64-elf
* the Xilinx zynqmp emulator (part of XSDK)

Preparation
,,,,,,,,,,,

**GNAT Installation:**

Before running XSDK, make sure that GNAT is installed and accessible from
your environment (PATH).

To test: from your command line, type:

  $ gprconfig --show-targets

This should at minimum list aarch64-elf.

**Board-specific projects:**

You will also need a Hardware Platform Specification project for your board.

Generation of the hardware specification is out of scope of this guide, please refer
to Xilinx documentation or Avnet UltraZed tutorials to do so.

Below, I will use the "design_1_wrapper_hw_platform_0" specification, that is the result
of the UltraZed Vivado tutorial.

You will also need a corresponding bsp (standalone BSP). I used "standalone bsp" as project
name. No extra library is needed.

Gnatbench Installation
,,,,,,,,,,,,,,,,,,,,,,


Open XSDK, then:

* Click on the menu item Help->Install new software
* Click on "Add", select "Archive", select the gnatbench zip file
* Click on "OK"
* Select AdaCore Plugins for Eclipse/CDT
* Click on Next and finish the installation

Restart xsdk before proceding to the next step.

Create an Ada Project
,,,,,,,,,,,,,,,,,,,,,

Click on the menu File -> Other, and select Ada -> Ada Project

In the dialog:

**Project name**:
  `hello`, use default location (click Next)
**Project unit name**:
  `Hello`, Single Project
**Main Program Settings**:
  `Hello`, Generate the file as a Hello World application
**Directories settings**:
  leave default
**Ada Builder settings**:
  click on Scan, select `aarch64-elf`, make sure no other
  toolchain is selected.

Click on Finish.

Right click on the project, select "Properties". In the "Project References"
section, add a dependency over "standalone_bsp". This is not strictly needed
to build the application, but will tell XSDK how to run or debug the
application. Close the dialog.

Right-click on the project hello, choose "Build main" -> "hello.adb".

Create a Run/Debug Configuration
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

**Debugging on QEMU**

Click on the Menu "Debug" > "Debug Configurations"

Select Xilinx C/C++ application (System Debugger on QEMU), and press the "New" button.

* Target setup:

  * Debug Type: "Standalone Application Debug"
  * Connection: "QEMU"
  * Hardware Platform: "design_1_wrapper_hw_platform_0"

* Application:

  * Project Name: click on Browse, select `hello`
  * Application: click on Search, select `hello`
  * Download checked for psu_cortexa53_0
  * (optional): check Stop at program entry.

Click Apply, then Debug.

This should launch QEMU and switch to the Debug perspective, and stop at
the entry point (or at main). Clicking on the 'Resume' button will display
"Hello World!" from the Emulator Console, and reset the simulator.

**On-board Debug**

Set your board to startup in JTAG mode, connect the JTAG module to your host, connect the
UART to your host and open a terminal (115200 bauds).

Now click on the Menu "Debug" -> "Debug Configurations"

Select Xilinx C/C++ application (System Debugger), and press the "New" button.

* Target setup:

  * Debug Type: "Standalone Application Debug"
  * Connection: "Local"
  * Hardware Platform: "design_1_wrapper_hw_platform_0"
  * Initialization File: "psu_init.tcl"
  * Run psu_init is checked

* Application:

  * Project Name: `hello`
  * Application: select `hello`
  * Download checked for "psu_cortexa53_0"
  * Check "Reset processor"
  * (optional): check Stop at program entry if you need to debug the crt0.

Click Apply, then Debug.

The debug view should open automatically, and the Cortex-A53 #0 should stop at main, with
the main entry point of the hello world example being displayed. Hitting continue will
output "Hello World!" via the UART.

Resources used by the runtime:
------------------------------

- the GIC is configured to redirect the exceptions to the Ada runtime
- the Software generated interrupt 0 is reserved by the runtime and should not
  be used by user code.
- The UART0 is used as standard input/output by the runtime.

Memory mapping:
---------------

.. code-block:: xml

  <!-- DDR, 2GB -->
  <region access="rwx---" cache="wb"
	  virt="0x00000000" size="0x80000000" name="ram"/>

  <!-- PL -->
  <region access="rw-rw-" cache="nc"
	  virt="0x80000000" size="0x40000000" name="pl"/>

  <!-- QSPI, lower PCIe -->
  <region access="rw-rw-" cache="nc"
	  virt="0xC0000000" size="0x20000000" name="qspi"/>

  <!-- Peripherals -->
  <region access="rw-rw-" cache="nc"
	  virt="0xF8000000" size="0x08000000" name="io"/>

Boot:
-----

For now, only boot from RAM is supported, with the entry point set to 0x00000.
