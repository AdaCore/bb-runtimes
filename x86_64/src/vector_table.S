##############################################################################
#                                                                            #
#                        Copyright (C) 2020, AdaCore                         #
#                                                                            #
#                               Assembly File                                #
#                                                                            #
##############################################################################

.extern __gnat_exception_handler
.extern __gnat_interrupt_handler

# Vector stubs that push the vector number onto the stack and call the common
# handler functions, expect for spurious interrupts where there is nothing to
# do but return.
#
# Written in assembly because gcc sticks the ud2 instruction at the end of
# every naked procedure, which given that we have 255 functions adds needless
# memory bloat.

#define EXC_VECTOR(n)           vector_ ## n: pushq $n;           jmp __gnat_exception_handler
#define EXC_VECTOR_WITH_CODE(n) vector_ ## n: pushq $0; pushq $n; jmp __gnat_exception_handler
#define IRQ_VECTOR(n)           vector_ ## n: pushq $n;           jmp __gnat_interrupt_handler
#define SPURIOUS_VECTOR(n)      vector_ ## n: iretq

        .section .vector_table,"ad"
        .align 16

EXC_VECTOR(0);            EXC_VECTOR(1);            EXC_VECTOR(2);
EXC_VECTOR(3);            EXC_VECTOR(4);            EXC_VECTOR(5);
EXC_VECTOR(6);            EXC_VECTOR(7);            EXC_VECTOR_WITH_CODE(8);
EXC_VECTOR(9);            EXC_VECTOR_WITH_CODE(10); EXC_VECTOR_WITH_CODE(11);
EXC_VECTOR_WITH_CODE(12); EXC_VECTOR_WITH_CODE(13); EXC_VECTOR_WITH_CODE(14);
EXC_VECTOR(15);           EXC_VECTOR(16);           EXC_VECTOR_WITH_CODE(17);
EXC_VECTOR(18);           EXC_VECTOR(19);           EXC_VECTOR(20);
EXC_VECTOR_WITH_CODE(21); EXC_VECTOR (22);           EXC_VECTOR(23);
EXC_VECTOR(24);           EXC_VECTOR(25);           EXC_VECTOR(26);
EXC_VECTOR(27);           EXC_VECTOR(28);           EXC_VECTOR(29);
EXC_VECTOR(30);           EXC_VECTOR(31);           SPURIOUS_VECTOR(32);
IRQ_VECTOR(33);           IRQ_VECTOR(34);           IRQ_VECTOR(35);
IRQ_VECTOR(36);           IRQ_VECTOR(37);           IRQ_VECTOR(38);
IRQ_VECTOR(39);           IRQ_VECTOR(40);           IRQ_VECTOR(41);
IRQ_VECTOR(42);           IRQ_VECTOR(43);           IRQ_VECTOR(44);
IRQ_VECTOR(45);           IRQ_VECTOR(46);           IRQ_VECTOR(47);
IRQ_VECTOR(48);           IRQ_VECTOR(49);           IRQ_VECTOR(50);
IRQ_VECTOR(51);           IRQ_VECTOR(52);           IRQ_VECTOR(53);
IRQ_VECTOR(54);           IRQ_VECTOR(55);           IRQ_VECTOR(56);
IRQ_VECTOR(57);           IRQ_VECTOR(58);           IRQ_VECTOR(59);
IRQ_VECTOR(60);           IRQ_VECTOR(61);           IRQ_VECTOR(62);
IRQ_VECTOR(63);           IRQ_VECTOR(64);           IRQ_VECTOR(65);
IRQ_VECTOR(66);           IRQ_VECTOR(67);           IRQ_VECTOR(68);
IRQ_VECTOR(69);           IRQ_VECTOR(70);           IRQ_VECTOR(71);
IRQ_VECTOR(72);           IRQ_VECTOR(73);           IRQ_VECTOR(74);
IRQ_VECTOR(75);           IRQ_VECTOR(76);           IRQ_VECTOR(77);
IRQ_VECTOR(78);           IRQ_VECTOR(79);           IRQ_VECTOR(80);
IRQ_VECTOR(81);           IRQ_VECTOR(82);           IRQ_VECTOR(83);
IRQ_VECTOR(84);           IRQ_VECTOR(85);           IRQ_VECTOR(86);
IRQ_VECTOR(87);           IRQ_VECTOR(88);           IRQ_VECTOR(89);
IRQ_VECTOR(90);           IRQ_VECTOR(91);           IRQ_VECTOR(92);
IRQ_VECTOR(93);           IRQ_VECTOR(94);           IRQ_VECTOR(95);
IRQ_VECTOR(96);           IRQ_VECTOR(97);           IRQ_VECTOR(98);
IRQ_VECTOR(99);           IRQ_VECTOR(100);          IRQ_VECTOR(101);
IRQ_VECTOR(102);          IRQ_VECTOR(103);          IRQ_VECTOR(104);
IRQ_VECTOR(105);          IRQ_VECTOR(106);          IRQ_VECTOR(107);
IRQ_VECTOR(108);          IRQ_VECTOR(109);          IRQ_VECTOR(110);
IRQ_VECTOR(111);          IRQ_VECTOR(112);          IRQ_VECTOR(113);
IRQ_VECTOR(114);          IRQ_VECTOR(115);          IRQ_VECTOR(116);
IRQ_VECTOR(117);          IRQ_VECTOR(118);          IRQ_VECTOR(119);
IRQ_VECTOR(120);          IRQ_VECTOR(121);          IRQ_VECTOR(122);
IRQ_VECTOR(123);          IRQ_VECTOR(124);          IRQ_VECTOR(125);
IRQ_VECTOR(126);          IRQ_VECTOR(127);          IRQ_VECTOR(128);
IRQ_VECTOR(129);          IRQ_VECTOR(130);          IRQ_VECTOR(131);
IRQ_VECTOR(132);          IRQ_VECTOR(133);          IRQ_VECTOR(134);
IRQ_VECTOR(135);          IRQ_VECTOR(136);          IRQ_VECTOR(137);
IRQ_VECTOR(138);          IRQ_VECTOR(139);          IRQ_VECTOR(140);
IRQ_VECTOR(141);          IRQ_VECTOR(142);          IRQ_VECTOR(143);
IRQ_VECTOR(144);          IRQ_VECTOR(145);          IRQ_VECTOR(146);
IRQ_VECTOR(147);          IRQ_VECTOR(148);          IRQ_VECTOR(149);
IRQ_VECTOR(150);          IRQ_VECTOR(151);          IRQ_VECTOR(152);
IRQ_VECTOR(153);          IRQ_VECTOR(154);          IRQ_VECTOR(155);
IRQ_VECTOR(156);          IRQ_VECTOR(157);          IRQ_VECTOR(158);
IRQ_VECTOR(159);          IRQ_VECTOR(160);          IRQ_VECTOR(161);
IRQ_VECTOR(162);          IRQ_VECTOR(163);          IRQ_VECTOR(164);
IRQ_VECTOR(165);          IRQ_VECTOR(166);          IRQ_VECTOR(167);
IRQ_VECTOR(168);          IRQ_VECTOR(169);          IRQ_VECTOR(170);
IRQ_VECTOR(171);          IRQ_VECTOR(172);          IRQ_VECTOR(173);
IRQ_VECTOR(174);          IRQ_VECTOR(175);          IRQ_VECTOR(176);
IRQ_VECTOR(177);          IRQ_VECTOR(178);          IRQ_VECTOR(179);
IRQ_VECTOR(180);          IRQ_VECTOR(181);          IRQ_VECTOR(182);
IRQ_VECTOR(183);          IRQ_VECTOR(184);          IRQ_VECTOR(185);
IRQ_VECTOR(186);          IRQ_VECTOR(187);          IRQ_VECTOR(188);
IRQ_VECTOR(189);          IRQ_VECTOR(190);          IRQ_VECTOR(191);
IRQ_VECTOR(192);          IRQ_VECTOR(193);          IRQ_VECTOR(194);
IRQ_VECTOR(195);          IRQ_VECTOR(196);          IRQ_VECTOR(197);
IRQ_VECTOR(198);          IRQ_VECTOR(199);          IRQ_VECTOR(200);
IRQ_VECTOR(201);          IRQ_VECTOR(202);          IRQ_VECTOR(203);
IRQ_VECTOR(204);          IRQ_VECTOR(205);          IRQ_VECTOR(206);
IRQ_VECTOR(207);          IRQ_VECTOR(208);          IRQ_VECTOR(209);
IRQ_VECTOR(210);          IRQ_VECTOR(211);          IRQ_VECTOR(212);
IRQ_VECTOR(213);          IRQ_VECTOR(214);          IRQ_VECTOR(215);
IRQ_VECTOR(216);          IRQ_VECTOR(217);          IRQ_VECTOR(218);
IRQ_VECTOR(219);          IRQ_VECTOR(220);          IRQ_VECTOR(221);
IRQ_VECTOR(222);          IRQ_VECTOR(223);          IRQ_VECTOR(224);
IRQ_VECTOR(225);          IRQ_VECTOR(226);          IRQ_VECTOR(227);
IRQ_VECTOR(228);          IRQ_VECTOR(229);          IRQ_VECTOR(230);
IRQ_VECTOR(231);          IRQ_VECTOR(232);          IRQ_VECTOR(233);
IRQ_VECTOR(234);          IRQ_VECTOR(235);          IRQ_VECTOR(236);
IRQ_VECTOR(237);          IRQ_VECTOR(238);          IRQ_VECTOR(239);
IRQ_VECTOR(240);          IRQ_VECTOR(241);          IRQ_VECTOR(242);
IRQ_VECTOR(243);          IRQ_VECTOR(244);          IRQ_VECTOR(245);
IRQ_VECTOR(246);          IRQ_VECTOR(247);          IRQ_VECTOR(248);
IRQ_VECTOR(249);          IRQ_VECTOR(250);          IRQ_VECTOR(251);
IRQ_VECTOR(252);          IRQ_VECTOR(253);          IRQ_VECTOR(254);
IRQ_VECTOR(255);

##########################
# Interrupt Vector Table #
##########################

# Note the IDT_GATE macro assumes the vectors are located in the first 64KB of
# ram.

KERNEL_CODE_SEGEMENT = 8
# Keep in sync with the kernel code segment position in the GDT defined in
# System.BB.CPU_Primitives.

# Interrupt/Exception Gate Type
INTERRUPT_GATE = 0x8e    # P => 1, DPL => 0, Type => 0EH (interrupt)
TRAP_GATE      = 0x8f    # P => 1, DLP => 0, Type => OFH (trap)

# IST stack choices
INTERRUPT_STACK = 1
EXCEPTION_STACK = 7

#define IDT_GATE(vector_number, type, ist)                          \
        .word vector_ ## vector_number; .word KERNEL_CODE_SEGEMENT; \
        .byte ist, type;                .word 0;                    \
        .long 0;                                                    \
        .long 0

        .section .idt,"ad"
        .align 16
idt:
        IDT_GATE(0,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(1,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(2,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(3,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(4,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(5,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(6,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(7,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(8,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(9,   TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(10,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(11,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(12,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(13,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(14,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(15,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(16,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(17,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(18,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(19,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(20,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(21,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(22,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(23,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(24,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(25,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(26,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(27,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(28,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(29,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(30,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(31,  TRAP_GATE,      EXCEPTION_STACK);
        IDT_GATE(32,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(33,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(34,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(35,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(36,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(37,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(38,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(39,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(40,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(41,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(42,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(43,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(44,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(45,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(46,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(47,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(48,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(49,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(50,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(51,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(52,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(53,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(54,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(55,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(56,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(57,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(58,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(59,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(60,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(61,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(62,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(63,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(64,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(65,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(66,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(67,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(68,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(69,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(70,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(71,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(72,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(73,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(74,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(75,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(76,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(77,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(78,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(79,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(80,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(81,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(82,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(83,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(84,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(85,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(86,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(87,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(88,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(89,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(90,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(91,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(92,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(93,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(94,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(95,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(96,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(97,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(98,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(99,  INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(100, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(101, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(102, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(103, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(104, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(105, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(106, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(107, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(108, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(109, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(110, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(111, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(112, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(113, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(114, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(115, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(116, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(117, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(118, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(119, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(120, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(121, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(122, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(123, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(124, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(125, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(126, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(127, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(128, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(129, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(130, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(131, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(132, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(133, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(134, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(135, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(136, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(137, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(138, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(139, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(140, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(141, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(142, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(143, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(144, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(145, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(146, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(147, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(148, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(149, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(150, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(151, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(152, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(153, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(154, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(155, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(156, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(157, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(158, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(159, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(160, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(161, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(162, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(163, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(164, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(165, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(166, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(167, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(168, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(169, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(170, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(171, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(172, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(173, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(174, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(175, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(176, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(177, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(178, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(179, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(180, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(181, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(182, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(183, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(184, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(185, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(186, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(187, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(188, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(189, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(190, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(191, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(192, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(193, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(194, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(195, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(196, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(197, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(198, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(199, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(200, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(201, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(202, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(203, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(204, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(205, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(206, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(207, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(208, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(209, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(210, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(211, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(212, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(213, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(214, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(215, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(216, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(217, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(218, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(219, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(220, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(221, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(222, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(223, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(224, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(225, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(226, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(227, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(228, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(229, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(230, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(231, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(232, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(233, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(234, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(235, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(236, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(237, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(238, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(239, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(240, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(241, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(242, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(243, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(244, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(245, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(246, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(247, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(248, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(249, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(250, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(251, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(252, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(253, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(254, INTERRUPT_GATE, INTERRUPT_STACK);
        IDT_GATE(255, INTERRUPT_GATE, INTERRUPT_STACK);

idt_end:

        .global __idt_access
__idt_access:
        .word (idt_end - idt - 1)
        .quad idt

